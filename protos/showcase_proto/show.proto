//CODEGEN BELOW - DO NOT TOUCH ME
syntax = "proto3";
package show;


message EnumArrayRustEnumAttributeFailTest2 {
  oneof value {
    Status fail = 1;
  }
}


message PaymentMethod {
  oneof value {
    uint64 cash = 1;
    string card = 2;
    QuoteLamports crypto = 3;
  }
}


message QuoteLamports {
  oneof value {
    uint64 lamports = 1;
    uint64 wsol = 2;
    uint64 usdc = 3;
    uint64 usdt = 4;
  }
}

enum Status {
  ACTIVE = 0;
  PENDING = 1;
  INACTIVE = 2;
  COMPLETED = 3;
}

message Address {
  string street = 1;
  string city = 2;
  string country = 3;
}

message ArrayTest3CustomTest {}

message ArrayTest3CustomTest2 {
  repeated ArrayTestMessageU16 test = 1;
}
message ArrayTest3Custom {
  oneof value {
    ArrayTest3CustomTest test = 1;
    ArrayTestMessageU16 test1 = 2;
    ArrayTest3CustomTest2 test2 = 3;
  }
}

message ArrayTestMessageCustom {
  repeated ArrayTestMessageU16 amount = 1;
}

message ArrayTestMessageU16 {
  repeated uint32 amount = 1;
}

message Attr {
  repeated string id_vec = 1;
  optional string id_opt = 2;
  Status status = 3;
  optional Status status_opt = 4;
  repeated Status status_vec = 5;
  int64 updated_at = 6;
}

message ComplexConversions {
  uint64 id = 1;
  int64 timestamp = 2;
  string metadata = 3;
  Status status = 4;
  string name = 5;
}

message Empty {

}

message EnumArrayRustEnumAttributeFailTestFail {
  repeated Status timestamp_array = 1;
}
message EnumArrayRustEnumAttributeFailTest {
  oneof value {
    EnumArrayRustEnumAttributeFailTestFail fail = 1;
  }
}

message FailingOptionCustomTupleVariantTest {}
message FailingOptionCustomTupleVariant {
  oneof value {
    FailingOptionCustomTupleVariantTest test = 1;
    User test1 = 2;
  }
}

message FieldNumbering {
  uint64 field1 = 1;
  string field2 = 2;
  uint32 field3 = 3;
  bool field4 = 4;
}

message FileData {
  string name = 1;
  repeated uint32 content = 2;
  uint64 size = 3;
}

message Invoice {
  uint64 id = 1;
  Person customer = 2;
  repeated Payment payments = 3;
  Status status = 4;
}

message MixedAnnotations {
  uint64 id = 1;
  int64 created_at = 2;
  Address address = 3;
}

message NumericTypes {
  uint32 uint32_field = 1;
  uint64 uint64_field = 2;
  int32 int32_field = 3;
  int64 int64_field = 4;
  float float_field = 5;
  double double_field = 6;
}

message OptionalComplex {
  uint64 id = 1;
  optional Address address = 2;
  optional QuoteLamports quote = 3;
  optional Status status = 4;
}

message OptionalFields {
  uint64 id = 1;
  optional string email = 2;
  optional uint32 age = 3;
}

message Order {
  uint64 id = 1;
  uint64 amount = 2;
  QuoteLamports quote = 3;
}

message Payment {
  uint64 id = 1;
  uint64 amount = 2;
  PaymentMethod method = 3;
  int64 created_at = 4;
}

message Person {
  uint64 id = 1;
  string name = 2;
  Address address = 3;
}

message RepeatedComplex {
  uint64 id = 1;
  repeated Address addresses = 2;
  repeated Order orders = 3;
  repeated Status statuses = 4;
  optional Status status_opt = 5;
}

message SimpleMessage {
  uint64 id = 1;
  string name = 2;
  bool active = 3;
}

message SingleField {
  uint64 value = 1;
}

message StructFailU16 {
  uint32 amount_2 = 1;
  optional uint32 amount = 2;
}

message StructU16 {
  uint32 inner = 1;
}

message StructU8 {
  uint32 inner = 1;
}

message StructU816 {
  uint32 inner = 1;
  uint64 inner2 = 2;
}

message Transaction {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
}

message TupleStruct2Test {
  bytes field_0 = 1;
  repeated uint32 field_1 = 2;
}

message TupleStructTest {
  uint64 field_0 = 1;
  uint32 field_1 = 2;
}

message User {
  uint64 id = 1;
  string name = 2;
}

message UserList {
  repeated uint64 ids = 1;
  repeated string names = 2;
}

message UserWithDefaults {
  uint64 id = 1;
  string name = 2;
}

message UserWithMetadata {
  uint64 id = 1;
  string name = 2;
}

message VecFailingTestEnumTest2 {
  repeated Status test1 = 1;
  optional Status test2 = 2;
  Status test3 = 3;
}
message VecFailingTestEnum {
  oneof value {
    VecFailingTestEnumTest2 test2 = 1;
  }
}

message VecTestEnumCustom2Test2 {
  repeated Status test1 = 1;
  optional Status test2 = 2;
  Status test3 = 3;
}
message VecTestEnumCustom2 {
  oneof value {
    Status test0 = 1;
    Status test1 = 2;
    VecTestEnumCustom2Test2 test2 = 3;
    Status test3 = 4;
  }
}

message VecTestEnumCustomTest {}

message VecTestEnumCustomTest2 {
  repeated Status test1 = 1;
  optional Status test2 = 2;
  Status test3 = 3;
}

message VecTestEnumCustomTest10 {
  repeated User test = 1;
  optional User test1 = 2;
  User test3 = 3;
}
message VecTestEnumCustom {
  oneof value {
    VecTestEnumCustomTest test = 1;
    Status test0 = 2;
    Status test1 = 3;
    VecTestEnumCustomTest2 test2 = 4;
    Status test3 = 5;
    User test7 = 6;
    User test8 = 7;
    User test9 = 8;
    VecTestEnumCustomTest10 test10 = 9;
  }
}

message VecTestEnumProstTest10 {
  User test3 = 1;
}
message VecTestEnumProst {
  oneof value {
    VecTestEnumProstTest10 test10 = 1;
  }
}

message VecTestEnumU16Test {}
message VecTestEnumU16 {
  oneof value {
    VecTestEnumU16Test test = 1;
    uint32 test1 = 2;
  }
}

message VecTestEnumU64Test {}

message VecTestEnumU64Test2 {
  repeated uint64 test = 1;
}
message VecTestEnumU64 {
  oneof value {
    VecTestEnumU64Test test = 1;
    uint64 test1 = 2;
    VecTestEnumU64Test2 test2 = 3;
    User test3 = 4;
  }
}

message VecTestEnumU8Test {}

message VecTestEnumU8Test2 {
  repeated uint32 test = 1;
}
message VecTestEnumU8 {
  oneof value {
    VecTestEnumU8Test test = 1;
    bytes test1 = 2;
    VecTestEnumU8Test2 test2 = 3;
  }
}

message VecTestMessageCustom {
  repeated ArrayTestMessageU16 amount = 1;
}

message VecTestMessageU16 {
  repeated uint32 amount = 1;
  optional uint32 amount_opt = 2;
  uint32 amount_plain = 3;
}

message VecTestMessageU64 {
  repeated uint64 amount = 1;
}

message VeryComplexFirst {}

message VeryComplexThird {
  uint64 id = 1;
  Address address = 2;
}

message VeryComplexRepeated {
  repeated uint64 id = 1;
  repeated Address address = 2;
}

message VeryComplexOption {
  optional uint64 id = 1;
  optional Address address = 2;
}

message VeryComplexAttr {
  repeated string id_vec = 1;
  optional string id_opt = 2;
  Status status = 3;
  optional Status status_opt = 4;
  repeated Status status_vec = 5;
}
message VeryComplex {
  oneof value {
    VeryComplexFirst first = 1;
    Address second = 2;
    VeryComplexThird third = 3;
    VeryComplexRepeated repeated = 4;
    VeryComplexOption option = 5;
    VeryComplexAttr attr = 6;
  }
}

message VeryComplexTestSkipAttr {

}
message VeryComplexTestSkip {
  oneof value {
    VeryComplexTestSkipAttr attr = 1;
    string tuple = 2;
    string tuple2 = 3;
  }
}

